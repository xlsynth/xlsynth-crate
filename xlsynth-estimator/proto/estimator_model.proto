// Copyright 2020 The XLS Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package xls.estimator_model;

// Enum describing the metric that the estimator is estimating. Every estimator
// is specific to one metric.
enum Metric {
  UNSPECIFIED_METRIC = 0;
  DELAY_METRIC = 1;
  AREA_METRIC = 2;
}

// Enum describing a specialization of the estimator model of an operation. A
// specialization describes a condition under which a metric (such as delay or
// area) of the operation is appreciably different then the general case.
// For example, a synthesized multiply is generally faster if both operands are
// identical and the delay model may include a specialized delay computation for
// this case (OPERANDS_IDENTICAL).
enum SpecializationKind {
  NO_SPECIALIZATION = 0;

  // All of the operands of the operation are the same.
  // e.g. "square" for mul, "double" for add
  OPERANDS_IDENTICAL = 1;

  // The operation includes a literal operand.
  HAS_LITERAL_OPERAND = 2;
}

// Describes more specifics of the condition under which the delay/area of the
// operation differs. For example, if the kind is HAS_LITERAL_OPERAND, this
// might specify that the literal operand must be operand 1.
message LiteralOperandDetails {
  // If none are specified, then any operand is allowed to be non-literal.
  repeated int64 allowed_nonliteral_operand = 1;

  // If none are specified, then no specific operand is required to be literal.
  repeated int64 required_literal_operand = 2;
}

// Describes an XLS operation (xls::Node) for the purposes of delay/area
// modeling.
message Operation {
  // XLS Op (e.g., kAdd).
  string op = 1;

  // Number of bits of the result of the operation. For array-types this is the
  // number of bits in each element.
  int64 bit_count = 2;

  // Operands.
  message Operand {
    // Number of bits of the operand. For array types this is the number of bits
    // in each element.
    int64 bit_count = 1;

    // If the operand is array-typed, this is the number of elements in the
    // array.
    int64 element_count = 2;
  }
  repeated Operand operands = 3;

  // The category of specialization of this operation, if any. For example, if
  // the operands of the xls::Node represented by this proto are all identical,
  // this field would be OPERANDS_IDENTICAL.
  SpecializationKind specialization = 4;

  message LiteralOperandInstanceDetails {
    repeated int64 literal_operand = 1;
    repeated int64 nonliteral_operand = 2;
  }
  LiteralOperandInstanceDetails literal_operand_details = 5;
}

// Describes a measured data point of the delay and area of an operation.
message DataPoint {
  Operation operation = 1;

  // The measured delay in ps.
  int64 delay = 2;

  // An optional offset which should be subtracted from the 'delay' value to
  // compute the actual delay of the operation. This can be used to account for
  // overhead such as clock-to-Q and setup time which may included in the
  // measured delay, but is not a component of the delay of the logic of the
  // operation. This value is per data point because it may change if underlying
  // synthesis rules change and a delay model may be built up over a period of
  // time spanning these rules changes.
  int64 delay_offset = 3;

  // Total area includes both sequential area and combinational area.
  double total_area = 4;

  double sequential_area = 5;
}

// Describes an aspect (bit count, number of operands, etc.) of an XLS operation
// which may be used as a input in the estimator for the operation.
message EstimatorFactor {
  enum Source {
    INVALID_VARIABLE_SOURCE = 0;

    // The bit count of the result of the operation.
    RESULT_BIT_COUNT = 1;

    // The bit count of a particular operand of the operation. The specific
    // operand is indicated by the field operand_number.
    OPERAND_BIT_COUNT = 2;

    // The total number of operands of the operation.
    OPERAND_COUNT = 3;

    // The number of element of a particular operand of the operation. The
    // operand must be array-typed. The specific operand is indicated by the
    // field operand_number.
    OPERAND_ELEMENT_COUNT = 4;

    // The width of an element number in a particular array-typed operand of the
    // operation. The specific operand is indicated by the field operand_number.
    OPERAND_ELEMENT_BIT_COUNT = 5;
  }
  Source source = 1;

  // If 'source' is one of the OPERAND_* values then this indicates the operand
  // number to use
  int64 operand_number = 2;
}

// Describes a nested mathematical expression combining estimator factors (and
// possibly constants). Useful when data for an op cannot be described by a
// linear combination of individual factors.
message EstimatorExpression {
  // The expression is a binary op combining two subexpressions.
  enum BinaryOperation {
    INVALID = 0;
    ADD = 1;
    DIVIDE = 2;
    MAX = 3;
    MIN = 4;
    MULTIPLY = 5;
    POWER = 6;
    SUB = 7;
  }

  // An expression can be either a BinaryOperation,
  // a EstimatorFactor, or an int.
  oneof expression_type {
    BinaryOperation bin_op = 1;

    // The expression is simply an estimator factor.
    EstimatorFactor factor = 2;

    // The expression is a constant.
    int64 constant = 3;
  }

  // Left and right hand side expressions combined by the BinaryOperation,
  // if present.
  EstimatorExpression lhs_expression = 4;
  EstimatorExpression rhs_expression = 5;
}

// Settings used for K-fold cross-validation of a regression estimor.
// A regression model will fail to build if it does not pass cross validation.
message KFoldValidator {
  // Note: oneof used here because proto3 does not support optional
  // fields without experimental features enabled.
  oneof optional_num_cross_validation_folds {
    // The number of folds to use for cross validation.
    // default = 5
    int64 num_cross_validation_folds = 1;
  }

  oneof optional_max_data_point_error {
    // The maximum allowable absolute error for any single data point.
    // default = infinity
    float max_data_point_error = 2;
  }
  oneof optional_max_fold_geomean_error {
    // max_fold_geomean_error: The maximum allowable geomean absolute error over
    // all data points in a given test set.
    // default = infinity
    float max_fold_geomean_error = 3;
  }
}

// Describes a estimator estimation model which fits a curve to the measured
// data points for the operation. The function (curve) includes a constant term
// and terms which are linear and logarithm functions of the indicated
// expressions. For example, if the expressions are the result bit count and the
// operand count then the function for the estimated delay has the form:
//
//   delay_est = P_0 + P_1 * result_bit_count + P_2 * log2(result_bit_count) +
//                     P_3 * operand_count    + P_4 * log2(operand_count)
//
// Where P_i are learned parameters.
message RegressionEstimator {
  repeated EstimatorExpression expressions = 1;

  // Note: oneof used here because proto3 does not support optional
  // fields without experimental features enabled.
  oneof optional_kfold_validator {
    // K-Fold validation settings.
    KFoldValidator kfold_validator = 2;
  }
}

// Similar to RegressionEstimator but includes more terms: x**2, xlogx, x, logx.
// For example, if the expressions are u and v, where u is the result bit count,
// and v is the operand count, then the area estimator has the form:
//   area_est = P_0 + P_1 * u**2 + P_2 * u*log(u) + P_3 * u + P_4 * log(u) +
//                    P_5 * v**2 + P_6 * v*log(v) + P_7 * v + P_8 * log(v)
//
// Where P_i are learned parameters.
message AreaRegressionEstimator {
  repeated EstimatorExpression expressions = 1;

  // Note: oneof used here because proto3 does not support optional
  // fields without experimental features enabled.
  oneof optional_kfold_validator {
    // K-Fold validation settings.
    KFoldValidator kfold_validator = 2;
  }
}

// Describes a estimation model in which the measured data points define
// bounding boxes in the space of expressions. The estimated delay (or area) for
// an operation X is equal to the delay (or area) of the first bounding box
// containing the point defined by the operation. For example, suppose the
// factors of a bounding box estimator are the result bit count and the operand
// count, and the measured data points are:
//
//   (1) result_bit_count=8, operand_count=3    : 100ps
//   (2) result_bit_count=5, operand_count=12   : 150ps
//   (3) result_bit_count=10, operand_count=16  : 200ps
//
// Then the delay of an operation with result_bit_count=5 and operand_count=6
// would be 150ps because the point (result_bit_count=5, operand_count=6) is
// contained in the bounding box of (result_bit_count=5, operand_count=12).
//
// The bounding box model is sensitive to the order in which the data points are
// listed in the DelayModel proto because the bounding boxes are tested
// sequentially and the first match is used.
// TODO(meheff): To avoid this undesirable sensitivity, perhaps take the minimum
// delay among the enclosing bounding boxes.
message BoundingBoxEstimator {
  repeated EstimatorFactor factors = 1;
}

// Estimator which uses logical effort computation to approximate
// delay. Specifically, ops with this estimator are handled by the method
// DelayEstimator::GetLogicalEffortDelayInPs. Typically only logical operations
// (AND, OR, etc) and a small number of other simple operations are handled via
// logical effort.
message LogicalEffortEstimator {
  // The delay of a single inverter in ps.
  int64 tau_in_ps = 1;
}

// Message describing a delay estimation model.
message Estimator {
  oneof estimator {
    // An estimator which returns a fixed value given by 'fixed'.
    int64 fixed = 1;

    // An estimator which aliases the model of a different op given by
    // alias_op. For example, kAdd and kSub have very similar delay
    // characteristics so the estimator for kSub may be defined as an alias of
    // kAdd by setting 'alias_op' to 'kAdd'.
    string alias_op = 2;

    // A curve-fitting model.
    RegressionEstimator regression = 3;

    // A bounding box model.
    BoundingBoxEstimator bounding_box = 4;

    // A logical effort estimator.
    LogicalEffortEstimator logical_effort = 5;

    // A curve-fitting model for area.
    AreaRegressionEstimator area_regression = 6;
  }
}

// Describes a model for computing the delay/area of a single operation
// (e.g. kAdd).
message OpModel {
  // The xls::Op for this model (e.g., kAdd).
  string op = 1;

  // The estimator to use to compute the metric.
  Estimator estimator = 2;

  // Zero or more estimators to use under specialized conditions indicated by
  // 'kind'. For example, the OpModel for 'kUMul' may include a specialization
  // of kind OPERANDS_IDENTICAL because the delay characteristics are different
  // for multiplies if both operands are the same.
  message Specialization {
    SpecializationKind kind = 1;
    Estimator estimator = 2;
    message Details {
      oneof specialization_details {
        LiteralOperandDetails literal_operand_details = 1;
      }
    }
    Details details = 3;
  }
  repeated Specialization specializations = 3;
}

// Describes an estimator model used for estimating a specific characteristic of
// an XLS operation. For example, this could be use to hold a collection of
// estimator models and data points for estimating the area of every op.
message EstimatorModel {
  // The models for each op.
  repeated OpModel op_models = 1;

  // Measured delays of XLS operations used as input data for
  // RegressionEstimator, AreaRegressionEstimator, and BoundingBoxEstimator.
  repeated DataPoint data_points = 2;

  // The metric this estimator model is estimating.
  Metric metric = 3;
}

// The op model describes the estimator for each XLS op type supported by this
// model.
message OpModels {
  repeated OpModel op_models = 1;
}

// Data points gathered from timing characterization or area characterization
//   (op, parameterization, specialization, result delay/area)
//   used for XLS regression estimators.
message DataPoints {
  repeated DataPoint data_points = 1;
}

// For an operand that is an array type, there will be one or more element
// counts.
// This contains
//   * which operand these element counts apply to
//   * the element count(s)
message OperandElementCounts {
  optional int64 operand_number = 1;
  repeated int64 element_counts = 2;
}

// Detailed specification of the operand and result types
message Parameterization {
  optional int64 result_width = 1;
  repeated int64 operand_widths = 2;
  // --- anything below is used only with array types ---
  repeated int64 result_element_counts = 3;
  repeated OperandElementCounts operand_element_counts = 4;
}

// Specifies the set of sample points for a particular op
message OpSamples {
  optional string op = 1;
  repeated Parameterization samples = 2;
  optional SpecializationKind specialization = 3;
  optional string attributes = 4;
}

// Multiple OpSamples messages
// There can be multiple op_samples with the same 'op'.
message OpSamplesList {
  repeated OpSamples op_samples = 1;
}
