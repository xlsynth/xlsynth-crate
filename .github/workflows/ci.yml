# SPDX-License-Identifier: Apache-2.0

name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
      - 'spr/main/**'

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  # -----------------------------------------------------------
  # 1) Lint-check / pre-commit gate on Ubuntu
  # -----------------------------------------------------------
  lint-check-ubuntu:
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v2


      - name: Install protobuf compiler
        run: |
          wget https://github.com/protocolbuffers/protobuf/releases/download/v29.1/protoc-29.1-linux-x86_64.zip
          unzip protoc-29.1-linux-x86_64.zip -d protoc
          sudo mv protoc/bin/protoc /usr/local/bin/protoc
          sudo mv protoc /tmp/  # Move these out of the way to not interfere with build.
          sudo mv protoc-*.zip /tmp/  # Move these out of the way to not interfere with build.
          protoc --version

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          profile: minimal
          override: true
          components: clippy

      - name: Enable Rust build cache
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true
          key: ubuntu-latest-${{ hashFiles('**/Cargo.lock') }}

      - name: Enable sccache
        uses: mozilla-actions/sccache-action@v0.0.6

      - name: Configure sccache for Rust (local-only)
        run: |
          echo "RUSTC_WRAPPER=sccache" >> $GITHUB_ENV
          echo "SCCACHE_GHA_ENABLED=off" >> $GITHUB_ENV
          echo "SCCACHE_DIR=$RUNNER_TEMP/sccache" >> $GITHUB_ENV
          echo "SCCACHE_CACHE_SIZE=2G" >> $GITHUB_ENV

      - name: Set up Python + pre-commit
        run: |
          cd ${GITHUB_WORKSPACE}
          echo "Initializing git repository as a workaround for pre-commit"
          if [ ! -d ".git" ]; then
            echo ".git directory not found, initializing..."
            git init
          else
            echo ".git directory found, skipping init."
          fi
          python3 -m pip install --upgrade pip
          pip3 install pre-commit
          # Configure git for pre-commit install
          echo "Configuring git safe directory and user..."
          git config --global --add safe.directory ${GITHUB_WORKSPACE}
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"
          echo "--- Running Git Diagnostics ---"
          echo "Current directory:"
          pwd
          echo "Listing contents (including .git):"
          ls -la
          echo "Git status:"
          git status
          echo "Git top level:"
          git rev-parse --show-toplevel
          echo "--- End Git Diagnostics ---"
          pre-commit install

      - name: Run pre-commit (which can include your rustfmt checks, etc.)
        env:
          SKIP: no-commit-to-branch
        run: |
          pre-commit run --all-files

      - name: Run version check test
        run: cargo test --test version_test

  # -----------------------------------------------------------
  # 2) Build/test on Ubuntu 22.04 and 24.04
  # -----------------------------------------------------------
  build-and-test-ubuntu:
    needs: [lint-check-ubuntu] # Ensure lint checks pass first
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-24.04, ubuntu-22.04]
      fail-fast: false

    steps:
      - name: Install libc++ from llvm-18
        run: |
          sudo apt-get update
          sudo apt-get install -y wget gnupg curl cmake
          cd /tmp/
          wget https://apt.llvm.org/llvm.sh
          chmod +x llvm.sh
          sudo ./llvm.sh 18
          sudo apt-get install -y libc++-18-dev libc++abi-18-dev
          sudo apt-get install -y libz3-dev

      - name: Check out code
        uses: actions/checkout@v2

      - name: Resolve XLS release tag
        id: resolve-xls-tag-matrix
        run: |
          TAG=$(python3 get_required_xls_release_tag.py)
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Cache xlsynth tools (ubuntu matrix)
        uses: actions/cache@v3
        with:
          path: xlsynth_tools
          key: ${{ runner.os }}-xls-tools-${{ steps.resolve-xls-tag-matrix.outputs.tag }}-ubuntu2004

      - name: Download xlsynth binaries
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
        run: |
          pip3 install -r requirements.txt
          TAG='${{ steps.resolve-xls-tag-matrix.outputs.tag }}'
          echo "Resolved XLS release tag: ${TAG}"
          python3 download_release.py -p ubuntu2004 -o xlsynth_tools -v ${TAG} --binaries=dslx_interpreter_main,ir_converter_main,codegen_main,opt_main,check_ir_equivalence_main,dslx_fmt,typecheck_main,prove_quickcheck_main

      - name: Download Slang
        run: |
          # We use the rocky8 binary for these systems since it has an easier requirements for glibc
          # version that works for ubuntu 22.04.
          curl -L -o slang "https://github.com/xlsynth/slang-rs/releases/download/ci/slang-rocky8"
          chmod +x slang
          # Add slang to PATH for subprocess usage
          echo "$(pwd)" >> $GITHUB_PATH

      - name: Install protobuf compiler
        run: |
          curl -L --retry 5 --retry-delay 2 --retry-connrefused -o protoc-29.1-linux-x86_64.zip https://github.com/protocolbuffers/protobuf/releases/download/v29.1/protoc-29.1-linux-x86_64.zip
          unzip protoc-29.1-linux-x86_64.zip -d protoc
          sudo mv protoc/bin/protoc /usr/local/bin/protoc
          sudo mv protoc /tmp/  # Move these out of the way to not interfere with build.
          sudo mv protoc-*.zip /tmp/  # Move these out of the way to not interfere with build.
          # Emit the protobuf compiler version number.
          protoc --version

      - name: Install Icarus Verilog (prebuilt for rocky8)
        run: |
          mkdir -p artifacts
          curl -L -o artifacts/iverilog-rocky8 "https://github.com/xlsynth/boolector-build/releases/download/iverilog-binaries-ea26587b5ef485f2ca82a3e4364e58ec3307240f/iverilog-rocky8"
          curl -L -o artifacts/vvp-rocky8 "https://github.com/xlsynth/boolector-build/releases/download/iverilog-binaries-ea26587b5ef485f2ca82a3e4364e58ec3307240f/vvp-rocky8"
          curl -L -o artifacts/ivl-rocky8.tar.gz "https://github.com/xlsynth/boolector-build/releases/download/iverilog-binaries-ea26587b5ef485f2ca82a3e4364e58ec3307240f/ivl-rocky8.tar.gz"
          sudo mkdir -p /usr/local/bin /usr/local/lib
          sudo cp artifacts/iverilog-rocky8 /usr/local/bin/iverilog
          sudo cp artifacts/vvp-rocky8 /usr/local/bin/vvp
          sudo chmod +x /usr/local/bin/iverilog /usr/local/bin/vvp
          sudo tar -xzf artifacts/ivl-rocky8.tar.gz -C /usr/local/lib
          rm -rf artifacts
          iverilog -V

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          profile: minimal
          override: true
          components: clippy

      - name: Enable sccache
        uses: mozilla-actions/sccache-action@v0.0.6

      - name: Configure sccache for Rust
        run: |
          echo "RUSTC_WRAPPER=sccache" >> $GITHUB_ENV
          echo "SCCACHE_GHA_ENABLED=off" >> $GITHUB_ENV
          echo "SCCACHE_DIR=$RUNNER_TEMP/sccache" >> $GITHUB_ENV
          echo "SCCACHE_CACHE_SIZE=5G" >> $GITHUB_ENV

      - name: Enable Rust build cache
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true
          key: ${{ matrix.os }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Download and set up Boolector
        run: |
          mkdir -p boolector_libs
          curl -L --retry 5 --retry-delay 2 --retry-connrefused -o boolector_libs/libboolector.so https://github.com/xlsynth/boolector-build/releases/download/boolector-debian10-171b2783200bf9f7636f3e595587ee822a0a6d07/libboolector-debian10.so
          sudo cp boolector_libs/libboolector.so /usr/lib/
          sudo ldconfig
          echo "Listing /usr/lib for libboolector.so:"
          ls -l /usr/lib/libboolector.so || echo "libboolector.so not found in /usr/lib!"
          echo "ldconfig -p | grep boolector:"
          ldconfig -p | grep boolector || echo "libboolector.so not found in ldconfig!"

      - name: Install Z3 binary
        run: |
          sudo apt-get install -y z3

      - name: Test crate
        env:
          BOOLECTOR_LIB_DIR: ${{ github.workspace }}/boolector_libs
          LD_LIBRARY_PATH: ${{ github.workspace }}/boolector_libs${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}
        run: |
          export SLANG_PATH=`realpath slang`
          export XLSYNTH_TOOLS=`realpath xlsynth_tools`
          export LD_LIBRARY_PATH="${{ github.workspace }}/boolector_libs${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}"
          echo "LD_LIBRARY_PATH for test execution: $LD_LIBRARY_PATH"
          if [ ! -f "/usr/lib/libboolector.so" ]; then
            echo "ERROR: libboolector.so not found in /usr/lib" >&2
            ls -l /usr/lib | grep boolector || true
            exit 1
          fi
          cargo test --features with-boolector-system,with-z3-system,with-easy-smt,with-z3-binary-test --workspace

      - name: Ensure benches compile
        env:
          BOOLECTOR_LIB_DIR: ${{ github.workspace }}/boolector_libs
          LD_LIBRARY_PATH: ${{ github.workspace }}/boolector_libs${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}
        run: cargo bench --features with-z3-system --workspace --no-run

  # -----------------------------------------------------------
  # 3) Ubuntu 20.04 job (no Slang download)
  # -----------------------------------------------------------
  build-and-test-ubuntu-2004-no-slang:
    needs: [lint-check-ubuntu]
    runs-on: ubuntu-latest
    container: ubuntu:20.04

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Install Python for resolve
        run: |
          export DEBIAN_FRONTEND=noninteractive
          apt-get update
          apt-get install -y --no-install-recommends python3 python3-pip

      - name: Resolve XLS release tag
        id: resolve-xls-tag-2004
        run: |
          TAG=$(python3 get_required_xls_release_tag.py)
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Cache xlsynth tools (ubuntu 20.04)
        uses: actions/cache@v3
        with:
          path: xlsynth_tools
          key: ${{ runner.os }}-xls-tools-${{ steps.resolve-xls-tag-2004.outputs.tag }}-ubuntu2004

      - name: Install dependencies for Python scripts and downloads
        run: |
          export DEBIAN_FRONTEND=noninteractive
          apt-get update
          apt-get install -y --no-install-recommends python3 python3-pip curl wget unzip git sudo build-essential pkg-config libssl-dev cmake libz3-dev zlib1g-dev
          pip3 install -r requirements.txt

      - name: Set up Python + pre-commit
        run: |
          cd ${GITHUB_WORKSPACE}
          echo "Initializing git repository as a workaround for pre-commit"
          if [ ! -d ".git" ]; then
            echo ".git directory not found, initializing..."
            git init
          else
            echo ".git directory found, skipping init."
          fi
          python3 -m pip install --upgrade pip
          pip3 install pre-commit
          # Configure git for pre-commit install
          echo "Configuring git safe directory and user..."
          git config --global --add safe.directory ${GITHUB_WORKSPACE}
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"
          echo "--- Running Git Diagnostics ---"
          echo "Current directory:"
          pwd
          echo "Listing contents (including .git):"
          ls -la
          echo "Git status:"
          git status
          echo "Git top level:"
          git rev-parse --show-toplevel
          echo "--- End Git Diagnostics ---"
          pre-commit install

      - name: Run pre-commit checks
        env:
          SKIP: no-commit-to-branch
        run: |
          # Git config done in setup step
          pre-commit run --all-files

      - name: Download xlsynth binaries
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
        run: |
          TAG='${{ steps.resolve-xls-tag-2004.outputs.tag }}'
          echo "Resolved XLS release tag: ${TAG}"
          python3 download_release.py -p ubuntu2004 -o xlsynth_tools -v ${TAG} --binaries=dslx_interpreter_main,ir_converter_main,codegen_main,opt_main,check_ir_equivalence_main,dslx_fmt,typecheck_main,prove_quickcheck_main

      - name: Install protobuf compiler
        run: |
          curl -L --retry 5 --retry-delay 2 --retry-connrefused -o protoc-29.1-linux-x86_64.zip https://github.com/protocolbuffers/protobuf/releases/download/v29.1/protoc-29.1-linux-x86_64.zip
          unzip protoc-29.1-linux-x86_64.zip -d protoc
          mv protoc/bin/protoc /usr/local/bin/protoc
          mv protoc /tmp/
          mv protoc-*.zip /tmp/
          protoc --version

      - name: Install Icarus Verilog (prebuilt for rocky8)
        run: |
          mkdir -p artifacts
          curl -L -o artifacts/iverilog-rocky8 "https://github.com/xlsynth/boolector-build/releases/download/iverilog-binaries-ea26587b5ef485f2ca82a3e4364e58ec3307240f/iverilog-rocky8"
          curl -L -o artifacts/vvp-rocky8 "https://github.com/xlsynth/boolector-build/releases/download/iverilog-binaries-ea26587b5ef485f2ca82a3e4364e58ec3307240f/vvp-rocky8"
          curl -L -o artifacts/ivl-rocky8.tar.gz "https://github.com/xlsynth/boolector-build/releases/download/iverilog-binaries-ea26587b5ef485f2ca82a3e4364e58ec3307240f/ivl-rocky8.tar.gz"
          sudo mkdir -p /usr/local/bin /usr/local/lib
          sudo cp artifacts/iverilog-rocky8 /usr/local/bin/iverilog
          sudo cp artifacts/vvp-rocky8 /usr/local/bin/vvp
          sudo chmod +x /usr/local/bin/iverilog /usr/local/bin/vvp
          sudo tar -xzf artifacts/ivl-rocky8.tar.gz -C /usr/local/lib
          rm -rf artifacts
          which iverilog
          iverilog -V

      - name: Install libc++ from llvm-18
        run: |
          export DEBIAN_FRONTEND=noninteractive
          apt-get update
          # Install prerequisites for llvm.sh and libc++ installation
          apt-get install -y --no-install-recommends curl wget gnupg lsb-release software-properties-common
          cd /tmp/
          wget https://apt.llvm.org/llvm.sh
          chmod +x llvm.sh
          ./llvm.sh 18
          # Install libc++ itself
          apt-get install -y --no-install-recommends libc++-18-dev libc++abi-18-dev

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          profile: minimal
          override: true
          components: clippy

      - name: Enable sccache
        uses: mozilla-actions/sccache-action@v0.0.6

      - name: Configure sccache for Rust
        run: |
          echo "RUSTC_WRAPPER=sccache" >> $GITHUB_ENV
          echo "SCCACHE_GHA_ENABLED=off" >> $GITHUB_ENV
          echo "SCCACHE_DIR=$RUNNER_TEMP/sccache" >> $GITHUB_ENV
          echo "SCCACHE_CACHE_SIZE=5G" >> $GITHUB_ENV

      - name: Enable Rust build cache
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true
          key: ubuntu-20.04-${{ hashFiles('**/Cargo.lock') }}

      - name: Show rustfmt and cargo versions
        run: |
          rustfmt --version
          cargo --version

      - name: Build crate
        run: cargo build --features with-z3-system --workspace -vv

      - name: Test crate
        run: |
          export XLSYNTH_TOOLS=`realpath xlsynth_tools`
          cargo test --features with-z3-system --workspace

  # -----------------------------------------------------------
  # 4) macOS job
  # -----------------------------------------------------------
  build-and-test-macos:
    needs: [lint-check-ubuntu]
    runs-on: macos-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Resolve XLS release tag
        id: resolve-xls-tag-macos
        run: |
          TAG=$(python3 get_required_xls_release_tag.py)
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Note Xcode version
        run: xcodebuild -version

      - name: Download xlsynth binaries
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
        run: |
          python3 -V  # Print the python3 version.
          pip3 install --break-system-packages -r requirements.txt
          TAG='${{ steps.resolve-xls-tag-macos.outputs.tag }}'
          echo "Resolved XLS release tag: ${TAG}"
          python3 download_release.py -p arm64 -o xlsynth_tools -v ${TAG} --binaries=dslx_interpreter_main,ir_converter_main,codegen_main,opt_main,check_ir_equivalence_main,dslx_fmt,typecheck_main,prove_quickcheck_main

      - name: Install protobuf compiler
        run: |
          curl -L --retry 5 --retry-delay 2 --retry-connrefused -o protoc-29.1-osx-aarch_64.zip https://github.com/protocolbuffers/protobuf/releases/download/v29.1/protoc-29.1-osx-aarch_64.zip
          unzip protoc-29.1-osx-aarch_64.zip -d protoc
          sudo mv protoc/bin/protoc /usr/local/bin/protoc
          sudo mv protoc /tmp/
          sudo mv protoc-*.zip /tmp/
          protoc --version

      - name: Install Icarus Verilog
        run: |
          brew update
          brew install icarus-verilog

      - name: Set up Python + pre-commit
        run: |
          python -m pip install --upgrade pip
          pip install pre-commit

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          profile: minimal
          override: true
          components: clippy

      - name: Enable sccache
        uses: mozilla-actions/sccache-action@v0.0.6

      - name: Configure sccache for Rust
        run: |
          echo "RUSTC_WRAPPER=sccache" >> $GITHUB_ENV
          echo "SCCACHE_GHA_ENABLED=off" >> $GITHUB_ENV
          echo "SCCACHE_DIR=$RUNNER_TEMP/sccache" >> $GITHUB_ENV
          echo "SCCACHE_CACHE_SIZE=5G" >> $GITHUB_ENV

      - name: Enable Rust build cache
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true
          key: macos-latest-${{ hashFiles('**/Cargo.lock') }}

      - name: Install Z3 binary
        run: |
          brew install z3 pkg-config

      - name: Configure Z3 env (macOS)
        run: |
          echo "Z3_SYS_USE_PKG_CONFIG=1" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=$(brew --prefix z3)/lib/pkgconfig:$PKG_CONFIG_PATH" >> $GITHUB_ENV
          echo "DYLD_FALLBACK_LIBRARY_PATH=$(brew --prefix z3)/lib:$DYLD_FALLBACK_LIBRARY_PATH" >> $GITHUB_ENV
          echo "Z3_SYS_Z3_HEADER=$(brew --prefix z3)/include/z3.h" >> $GITHUB_ENV
          echo "C_INCLUDE_PATH=$(brew --prefix z3)/include:$C_INCLUDE_PATH" >> $GITHUB_ENV
          echo "LIBRARY_PATH=$(brew --prefix z3)/lib:$LIBRARY_PATH" >> $GITHUB_ENV
          pkg-config --modversion z3 || true

      - name: Run pre-commit
        env:
          SKIP: no-commit-to-branch
        run: |
          pre-commit install
          pre-commit run --all-files

      - name: Test crate
        run: |
          export XLSYNTH_TOOLS=`realpath xlsynth_tools`
          cargo test --features with-boolector-built,with-z3-system,with-easy-smt,with-z3-binary-test --workspace

  # -----------------------------------------------------------
  # 5) Rocky Linux job
  # -----------------------------------------------------------
  build-and-test-rocky8:
    needs: [lint-check-ubuntu]
    runs-on: ubuntu-latest
    container: rockylinux:8
    env:
      OS_KEY: rocky8

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Download xlsynth binaries
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
        run: |
          dnf install -y python3 python3-pip
          python3 -V  # Print the python3 version.
          pip3 install -r requirements.txt
          TAG=$(python3 get_required_xls_release_tag.py)
          echo "Resolved XLS release tag: ${TAG}"
          python3 download_release.py -p rocky8 -o xlsynth_tools -v ${TAG} --binaries=dslx_interpreter_main,ir_converter_main,codegen_main,opt_main,check_ir_equivalence_main,dslx_fmt,typecheck_main,prove_quickcheck_main

      - name: Install protobuf compiler
        run: |
          yum install -y curl unzip
          curl -L --retry 5 --retry-delay 2 --retry-connrefused -o protoc-29.1-linux-x86_64.zip https://github.com/protocolbuffers/protobuf/releases/download/v29.1/protoc-29.1-linux-x86_64.zip
          unzip protoc-29.1-linux-x86_64.zip -d protoc
          mv protoc/bin/protoc /usr/local/bin/protoc
          mv protoc /tmp/  # Move these out of the way to not interfere with build.
          mv protoc-*.zip /tmp/  # Move these out of the way to not interfere with build.
          # Emit the protobuf compiler version number.
          protoc --version

      - name: Install Icarus Verilog (prebuilt for rocky8)
        run: |
          mkdir -p artifacts
          curl -L -o artifacts/iverilog-rocky8 "https://github.com/xlsynth/boolector-build/releases/download/iverilog-binaries-ea26587b5ef485f2ca82a3e4364e58ec3307240f/iverilog-rocky8"
          curl -L -o artifacts/vvp-rocky8 "https://github.com/xlsynth/boolector-build/releases/download/iverilog-binaries-ea26587b5ef485f2ca82a3e4364e58ec3307240f/vvp-rocky8"
          curl -L -o artifacts/ivl-rocky8.tar.gz "https://github.com/xlsynth/boolector-build/releases/download/iverilog-binaries-ea26587b5ef485f2ca82a3e4364e58ec3307240f/ivl-rocky8.tar.gz"
          install -m 0755 artifacts/iverilog-rocky8 /usr/bin/iverilog
          install -m 0755 artifacts/vvp-rocky8 /usr/bin/vvp
          mkdir -p /usr/local/lib
          tar -xzf artifacts/ivl-rocky8.tar.gz -C /usr/local/lib
          rm -rf artifacts

      - name: Set up dependencies
        run: |
          dnf install -y gcc openssl-devel libffi-devel make curl which --nobest
          dnf install -y protobuf-compiler
          dnf install -y llvm-toolset
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          echo "source $HOME/.cargo/env" >> $HOME/.bashrc
          source $HOME/.cargo/env

      - name: Download Slang
        run: |
          curl -L -o slang "https://github.com/xlsynth/slang-rs/releases/download/ci/slang-rocky8"
          chmod +x slang
          # Add slang to PATH for subprocess usage
          echo "$(pwd)" >> $GITHUB_PATH

      - name: Build crate
        run: |
          source $HOME/.cargo/env
          cargo build --workspace -vv

      - name: Test crate
        run: |
          source $HOME/.cargo/env
          export PATH=/usr/local/bin:/usr/bin:$PATH
          which iverilog || true
          iverilog -V || true
          export SLANG_PATH=`realpath slang`
          export XLSYNTH_TOOLS=`realpath xlsynth_tools`
          cargo test --workspace

  valgrind-tests:
    name: Valgrind Tests (Ubuntu)
    needs: [lint-check-ubuntu]
    runs-on: ubuntu-22.04
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Resolve XLS release tag
        id: resolve-xls-tag-valgrind
        run: |
          TAG=$(python3 get_required_xls_release_tag.py)
          echo "tag=$TAG" >> $GITHUB_OUTPUT
      - name: Set up Rust nightly
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          profile: minimal
          override: true
          components: clippy

      - name: Enable sccache
        uses: mozilla-actions/sccache-action@v0.0.6

      - name: Configure sccache for Rust
        run: |
          echo "RUSTC_WRAPPER=sccache" >> $GITHUB_ENV
          echo "SCCACHE_GHA_ENABLED=off" >> $GITHUB_ENV
          echo "SCCACHE_DIR=$RUNNER_TEMP/sccache" >> $GITHUB_ENV
          echo "SCCACHE_CACHE_SIZE=5G" >> $GITHUB_ENV

      - name: Enable Rust build cache
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true
          key: ubuntu-22.04-${{ hashFiles('**/Cargo.lock') }}

      - name: Install protobuf compiler
        run: |
          curl -L --retry 5 --retry-delay 2 --retry-connrefused -o protoc-29.1-linux-x86_64.zip https://github.com/protocolbuffers/protobuf/releases/download/v29.1/protoc-29.1-linux-x86_64.zip
          unzip protoc-29.1-linux-x86_64.zip -d protoc
          sudo mv protoc/bin/protoc /usr/local/bin/protoc
          sudo mv protoc /tmp/  # Move these out of the way to not interfere with build.
          sudo mv protoc-*.zip /tmp/  # Move these out of the way to not interfere with build.
          # Emit the protobuf compiler version number.
          protoc --version

      - name: Install Icarus Verilog (prebuilt for rocky8)
        run: |
          mkdir -p artifacts
          curl -L -o artifacts/iverilog-rocky8 "https://github.com/xlsynth/boolector-build/releases/download/iverilog-binaries-ea26587b5ef485f2ca82a3e4364e58ec3307240f/iverilog-rocky8"
          curl -L -o artifacts/vvp-rocky8 "https://github.com/xlsynth/boolector-build/releases/download/iverilog-binaries-ea26587b5ef485f2ca82a3e4364e58ec3307240f/vvp-rocky8"
          curl -L -o artifacts/ivl-rocky8.tar.gz "https://github.com/xlsynth/boolector-build/releases/download/iverilog-binaries-ea26587b5ef485f2ca82a3e4364e58ec3307240f/ivl-rocky8.tar.gz"
          sudo mkdir -p /usr/local/bin /usr/local/lib
          sudo cp artifacts/iverilog-rocky8 /usr/local/bin/iverilog
          sudo cp artifacts/vvp-rocky8 /usr/local/bin/vvp
          sudo chmod +x /usr/local/bin/iverilog /usr/local/bin/vvp
          sudo tar -xzf artifacts/ivl-rocky8.tar.gz -C /usr/local/lib
          iverilog -V

      - name: Install libc++ from llvm-18
        run: |
          sudo apt-get update
          sudo apt-get install -y curl wget gnupg
          cd /tmp/
          wget https://apt.llvm.org/llvm.sh
          chmod +x llvm.sh
          sudo ./llvm.sh 18
          sudo apt-get install -y libc++-18-dev libc++abi-18-dev

      - name: Install valgrind
        run: |
          sudo apt-get update
          sudo apt-get install -y valgrind libz3-dev

      - name: Download xlsynth binaries
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
        run: |
          pip3 install -r requirements.txt
          TAG='${{ steps.resolve-xls-tag-valgrind.outputs.tag }}'
          echo "Resolved XLS release tag: ${TAG}"
          python3 download_release.py -p ubuntu2004 -o xlsynth_tools -v ${TAG} --binaries=dslx_interpreter_main,ir_converter_main,codegen_main,opt_main,check_ir_equivalence_main,dslx_fmt,typecheck_main,prove_quickcheck_main

      - name: Download Slang
        run: |
          curl -L -o slang "https://github.com/xlsynth/slang-rs/releases/download/ci/slang-rocky8"
          chmod +x slang
          # Add slang to PATH for subprocess usage
          echo "$(pwd)" >> $GITHUB_PATH

      - name: Build crate
        run: cargo build --features with-z3-system --workspace -vv

      - name: Run Valgrind Tests
        run: |
          export SLANG_PATH=$(realpath slang)
          export XLSYNTH_TOOLS=$(realpath xlsynth_tools)
          cp $(find -name 'libxls-v*-*.so' | head -n 1) .
          export LD_LIBRARY_PATH=$(pwd):$LD_LIBRARY_PATH
          python3 run_valgrind_on_tests.py --filter-to-run=sample_usage,ir_interpret_test

  build-and-test-predownloaded:
    runs-on: ubuntu-latest
    name: Build and Test with Pre-Downloaded Artifacts
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Resolve XLS release tag
        id: resolve-xls-tag-predownload
        run: |
          TAG=$(python3 get_required_xls_release_tag.py)
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          profile: minimal
          override: true
          components: clippy

      - name: Enable sccache
        uses: mozilla-actions/sccache-action@v0.0.6

      - name: Configure sccache for Rust
        run: |
          echo "RUSTC_WRAPPER=sccache" >> $GITHUB_ENV
          echo "SCCACHE_GHA_ENABLED=off" >> $GITHUB_ENV
          echo "SCCACHE_DIR=$RUNNER_TEMP/sccache" >> $GITHUB_ENV
          echo "SCCACHE_CACHE_SIZE=5G" >> $GITHUB_ENV

      - name: Enable Rust build cache
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true
          key: ubuntu-latest-${{ hashFiles('**/Cargo.lock') }}

      - name: Pre-download artifacts using download_release.py
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
        run: |
          # Note we download rocky8 version just because they have the fewest/oldest system
          # requirements.
          TAG='${{ steps.resolve-xls-tag-predownload.outputs.tag }}'
          echo "Resolved XLS release tag: ${TAG}"
          python3 download_release.py -p rocky8 -o pre_download -d -v ${TAG} --binaries=dslx_interpreter_main,ir_converter_main,codegen_main,opt_main,check_ir_equivalence_main,dslx_fmt,typecheck_main,prove_quickcheck_main

      - name: Run cargo tests using pre-downloaded artifacts
        env:
          XLS_DSO_PATH: ${{ github.workspace }}/pre_download/libxls-rocky8.so
          DSLX_STDLIB_PATH: ${{ github.workspace }}/pre_download/xls/dslx/stdlib
          LD_LIBRARY_PATH: ${{ github.workspace }}/pre_download:$LD_LIBRARY_PATH
        run: |
          echo "Using XLS_DSO_PATH=${XLS_DSO_PATH}"
          echo "Using DSLX_STDLIB_PATH=${DSLX_STDLIB_PATH}"
          cargo test -p xlsynth --verbose

  fuzz-smoke:
    name: Fuzz Smoke Test
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Resolve XLS release tag
        id: resolve-xls-tag-smoke
        run: |
          TAG=$(python3 get_required_xls_release_tag.py)
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          profile: minimal
          override: true

      - name: Enable sccache
        uses: mozilla-actions/sccache-action@v0.0.6

      - name: Configure sccache for Rust
        run: |
          echo "RUSTC_WRAPPER=sccache" >> $GITHUB_ENV
          echo "SCCACHE_GHA_ENABLED=off" >> $GITHUB_ENV
          echo "SCCACHE_DIR=$RUNNER_TEMP/sccache" >> $GITHUB_ENV
          echo "SCCACHE_CACHE_SIZE=5G" >> $GITHUB_ENV

      - name: Enable Rust build cache
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true
          key: ubuntu-latest-${{ hashFiles('**/Cargo.lock') }}

      - name: Install protobuf compiler
        run: |
          sudo apt-get install -y protobuf-compiler

      - name: Download and set up Boolector
        run: |
          mkdir -p boolector_libs
          curl -L --retry 5 --retry-delay 2 --retry-connrefused -o boolector_libs/libboolector.so https://github.com/xlsynth/boolector-build/releases/download/boolector-debian10-171b2783200bf9f7636f3e595587ee822a0a6d07/libboolector-debian10.so
          sudo cp boolector_libs/libboolector.so /usr/lib/
          sudo ldconfig

      - name: Verify Boolector library presence
        run: |
          ls -l /usr/lib/libboolector.so
          ldconfig -p | grep boolector

      - name: Install Z3 binary
        run: |
          sudo apt-get install -y z3

      - name: Download xlsynth tools for fuzzing
        run: |
          pip3 install -r requirements.txt
          TAG='${{ steps.resolve-xls-tag-smoke.outputs.tag }}'
          echo "Resolved XLS release tag: ${TAG}"
          python3 download_release.py -p rocky8 -v ${TAG} --binaries check_ir_equivalence_main -d -o /tmp/xlsynth_tools_smoke
          sudo mv /tmp/xlsynth_tools_smoke/libxls-rocky8.so /usr/lib/libxls-rocky8.so
          sudo ldconfig

      - name: Install cargo-fuzz
        run: |
          cargo install cargo-fuzz

      - name: Cargo fuzz build
        env:
          XLSYNTH_TOOLS: /tmp/xlsynth_tools_smoke
          XLS_DSO_PATH: /usr/lib/libxls-rocky8.so
          DSLX_STDLIB_PATH: /tmp/xlsynth_tools_smoke/xls/dslx/stdlib
        run: |
          cd xlsynth-g8r/fuzz
          cargo fuzz build --features with-z3-binary-test,with-boolector-system

      - name: Build and run fuzz_ir_opt_equiv for 10 seconds
        env:
          XLSYNTH_TOOLS: /tmp/xlsynth_tools_smoke
          XLS_DSO_PATH: /usr/lib/libxls-rocky8.so
          DSLX_STDLIB_PATH: /tmp/xlsynth_tools_smoke/xls/dslx/stdlib
        run: |
          cd xlsynth-g8r/fuzz
          cargo fuzz run fuzz_ir_opt_equiv --features with-z3-binary-test,with-boolector-system -- -max_total_time=10

      - name: Build and run fuzz_gatify for 10 seconds
        env:
          XLSYNTH_TOOLS: /tmp/xlsynth_tools_smoke
          XLS_DSO_PATH: /usr/lib/libxls-rocky8.so
          DSLX_STDLIB_PATH: /tmp/xlsynth_tools_smoke/xls/dslx/stdlib
        run: |
          cd xlsynth-g8r/fuzz
          cargo fuzz run fuzz_gatify --features with-z3-binary-test,with-boolector-system -- -max_total_time=10

      - name: Build and run fuzz_gate_fn_roundtrip for 10 seconds
        env:
          XLSYNTH_TOOLS: /tmp/xlsynth_tools_smoke
          XLS_DSO_PATH: /usr/lib/libxls-rocky8.so
          DSLX_STDLIB_PATH: /tmp/xlsynth_tools_smoke/xls/dslx/stdlib
        run: |
          cd xlsynth-g8r/fuzz
          cargo fuzz run fuzz_gate_fn_roundtrip --features with-z3-binary-test,with-boolector-system -- -max_total_time=10

      - name: Build and run fuzz_gate_transform_equiv for 10 seconds
        env:
          XLSYNTH_TOOLS: /tmp/xlsynth_tools_smoke
          XLS_DSO_PATH: /usr/lib/libxls-rocky8.so
          DSLX_STDLIB_PATH: /tmp/xlsynth_tools_smoke/xls/dslx/stdlib
        run: |
          cd xlsynth-g8r/fuzz
          cargo fuzz run fuzz_gate_transform_equiv --features with-z3-binary-test,with-boolector-system -- -max_total_time=10

      - name: Build and run fuzz_ir_rebase_equiv for 10 seconds
        env:
          XLSYNTH_TOOLS: /tmp/xlsynth_tools_smoke
          XLS_DSO_PATH: /usr/lib/libxls-rocky8.so
          DSLX_STDLIB_PATH: /tmp/xlsynth_tools_smoke/xls/dslx/stdlib
        run: |
          cd xlsynth-g8r/fuzz
          cargo fuzz run fuzz_ir_rebase_equiv --features with-z3-binary-test,with-boolector-system -- -max_total_time=10
