# SPDX-License-Identifier: Apache-2.0

name: Publish to crates.io
permissions:
  contents: write

on:
  push:
    tags:
      - "v*" # This will trigger the workflow on version tags like v1.0.0, v0.1.0, etc.

jobs:
  publish:
    runs-on: macos-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v3
        with:
          # Fetch full history and all tags so gen_version_compat.py can inspect them.
          fetch-depth: 0

      - name: Check version numbers
        run: python bump_version_numbers.py check

      - name: Set up version variables
        id: version_vars
        run: |
          FULL_VERSION="${GITHUB_REF#refs/tags/}"
          echo "FULL_VERSION=$FULL_VERSION"
          VERSION_NO_V="${FULL_VERSION#v}"
          echo "VERSION_NO_V=$VERSION_NO_V"
          echo "::set-output name=version_no_v::$VERSION_NO_V"

      - name: Extract DSO version tag
        id: dso_ver
        run: |
          # Grep the xlsynth-sys build script for the DSO release tag
          DSO_TAG=$(sed -n 's/^const RELEASE_LIB_VERSION_TAG:.*"\(v[0-9]\+\.[0-9]\+\.[0-9]\+\)".*/\1/p' xlsynth-sys/build.rs)
          if [ -z "$DSO_TAG" ]; then
            echo "Failed to extract DSO version tag from xlsynth-sys/build.rs"
            exit 1
          fi
          echo "DSO_TAG=$DSO_TAG"
          echo "dso_tag=$DSO_TAG" >> $GITHUB_OUTPUT

      - name: Validate version matches
        run: |
          python3 check_version_is.py "${{ steps.version_vars.outputs.version_no_v }}"

      - name: Download xlsynth binaries
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
        run: |
          python3 -V
          pip3 install --break-system-packages requests
          python3 download_release.py -v "${{ steps.dso_ver.outputs.dso_tag }}" -p arm64 -o xlsynth_tools --binaries=dslx_interpreter_main,ir_converter_main,codegen_main,opt_main,check_ir_equivalence_main,dslx_fmt,typecheck_main,prove_quickcheck_main

      - name: Install protobuf compiler
        run: |
          curl -L --retry 5 --retry-delay 2 --retry-connrefused -o protoc-29.1-osx-aarch_64.zip https://github.com/protocolbuffers/protobuf/releases/download/v29.1/protoc-29.1-osx-aarch_64.zip
          unzip protoc-29.1-osx-aarch_64.zip -d protoc
          sudo mv protoc/bin/protoc /usr/local/bin/protoc
          sudo mv protoc /tmp/
          sudo mv protoc-*.zip /tmp/
          protoc --version

      - name: Install Icarus Verilog
        run: |
          brew update
          brew install icarus-verilog

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: Cache Cargo registry
        uses: actions/cache@v3
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      - name: Cache Cargo index
        uses: actions/cache@v3
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-index-

      - name: Build and test
        run: |
          export XLSYNTH_TOOLS=`realpath xlsynth_tools`
          cargo test --workspace

      - name: Install Python dependencies for polling script
        run: python3 -m pip install --break-system-packages requests

      - name: Publish xlsynth-sys to crates.io
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CRATES_IO_TOKEN }}
        run: |
          cd xlsynth-sys
          cargo publish --token $CARGO_REGISTRY_TOKEN

      - name: Wait for xlsynth-sys on crates.io
        run: python3 sleep_until_version_seen.py xlsynth-sys "${{ steps.version_vars.outputs.version_no_v }}"

      - name: Publish xlsynth
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CRATES_IO_TOKEN }}
        run: |
          cd xlsynth
          cargo publish --token $CARGO_REGISTRY_TOKEN

      - name: Wait for xlsynth on crates.io
        run: python3 sleep_until_version_seen.py xlsynth "${{ steps.version_vars.outputs.version_no_v }}"

      - name: Publish xlsynth-test-helpers
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CRATES_IO_TOKEN }}
        run: |
          cd xlsynth-test-helpers
          cargo publish --token $CARGO_REGISTRY_TOKEN

      - name: Wait for xlsynth-test-helpers on crates.io
        run: python3 sleep_until_version_seen.py xlsynth-test-helpers "${{ steps.version_vars.outputs.version_no_v }}"

      - name: Publish xlsynth-g8r
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CRATES_IO_TOKEN }}
        run: |
          cd xlsynth-g8r
          cargo publish --token $CARGO_REGISTRY_TOKEN

      - name: Wait for xlsynth-g8r on crates.io
        run: python3 sleep_until_version_seen.py xlsynth-g8r "${{ steps.version_vars.outputs.version_no_v }}"

      - name: Publish xlsynth-driver
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CRATES_IO_TOKEN }}
        run: |
          cd xlsynth-driver
          cargo publish --token $CARGO_REGISTRY_TOKEN

      # No wait needed after the last crate published in the sequence

      - name: Bump version numbers
        if: success()
        run: |
          cargo clean
          python bump_version_numbers.py bump
          cargo generate-lockfile

      - name: Commit bumped version numbers
        if: success()
        run: |
          git config user.name "github-actions"
          git config user.email "xlsynth-github-actions@xlsynth.org"
          git add $(find . -type f -name "Cargo.toml")
          git commit -m "Bump version numbers after successful publish"
          git push "https://${GITHUB_ACTOR}:${MY_PAT}@github.com/${GITHUB_REPOSITORY}.git" HEAD:main

      - name: Update version compatibility docs
        if: success()
        run: |
          python3 gen_version_compat.py

      - name: Commit version metadata update
        if: success()
        run: |
          git config user.name "github-actions"
          git config user.email "xlsynth-github-actions@xlsynth.org"
          git add docs/version_metadata.md generated_version_compat.json
          git commit -m "Update version metadata after successful publish"
          git push "https://${GITHUB_ACTOR}:${MY_PAT}@github.com/${GITHUB_REPOSITORY}.git" HEAD:main
